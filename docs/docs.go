// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/info": {
            "get": {
                "description": "this will return versions, ports, ...",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "info"
                ],
                "summary": "get basic info about the app",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/memstore/data": {
            "get": {
                "description": "this will return detailed metrics, including all the datapoints and calculated aggregates",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "get metrics dump",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/rest.MetricDataPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/memstore/names": {
            "get": {
                "description": "this will return the metric names of all tracked metric series in the store",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "get metric names in the store",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "rest.MetricDataPayload": {
            "type": "object",
            "properties": {
                "aggregatesOverTime": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    }
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ObservedValue"
                    }
                },
                "labels": {
                    "$ref": "#/definitions/types.Labels"
                },
                "lastUpdate": {
                    "type": "integer"
                }
            }
        },
        "types.Labels": {
            "type": "object",
            "additionalProperties": {}
        },
        "types.ObservedValue": {
            "type": "object",
            "properties": {
                "time": {
                    "description": "timestamp of last update (in seconds)",
                    "type": "integer"
                },
                "value": {
                    "description": "observed value",
                    "type": "number"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
